// <auto-generated />
using Backend_Generator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend_Generator.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530164522_InitialMigrate")]
    partial class InitialMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.28");

            modelBuilder.Entity("Backend_Generator.Model.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoomId = 1,
                            SubjectId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoomId = 2,
                            SubjectId = 2,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 3,
                            RoomId = 3,
                            SubjectId = 3,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 4,
                            RoomId = 4,
                            SubjectId = 4,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 5,
                            RoomId = 5,
                            SubjectId = 5,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 6,
                            RoomId = 6,
                            SubjectId = 6,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 7,
                            RoomId = 7,
                            SubjectId = 7,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 8,
                            RoomId = 8,
                            SubjectId = 8,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 9,
                            RoomId = 9,
                            SubjectId = 9,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 10,
                            RoomId = 10,
                            SubjectId = 10,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 11,
                            RoomId = 11,
                            SubjectId = 11,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 12,
                            RoomId = 12,
                            SubjectId = 12,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 13,
                            RoomId = 13,
                            SubjectId = 13,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 14,
                            RoomId = 14,
                            SubjectId = 14,
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 15,
                            RoomId = 15,
                            SubjectId = 15,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("Backend_Generator.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Room 101"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Room 401"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Room 501"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Room 301"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Room 201"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lab 1"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lab 3"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Room 601"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Room 801"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Room 701"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Room 901"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Room 1001"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Room 1101"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Room 1201"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Gym"
                        });
                });

            modelBuilder.Entity("Backend_Generator.Model.ScheduleEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HourOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("RoomId", "DayOfWeek", "HourOfDay")
                        .IsUnique();

                    b.HasIndex("SchoolClassId", "DayOfWeek", "HourOfDay")
                        .IsUnique();

                    b.HasIndex("TeacherId", "DayOfWeek", "HourOfDay")
                        .IsUnique();

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Backend_Generator.Model.SchoolClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Class A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Class B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Class C"
                        });
                });

            modelBuilder.Entity("Backend_Generator.Model.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 2,
                            Name = "English"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "History"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Geography"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Literature"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Economics"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Philosophy"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Physical Education"
                        });
                });

            modelBuilder.Entity("Backend_Generator.Model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Teacher X"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Teacher Y"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Teacher Z"
                        });
                });

            modelBuilder.Entity("Backend_Generator.Model.Lesson", b =>
                {
                    b.HasOne("Backend_Generator.Model.Room", "Room")
                        .WithMany("Lessons")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Generator.Model.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Generator.Model.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Backend_Generator.Model.ScheduleEntry", b =>
                {
                    b.HasOne("Backend_Generator.Model.Lesson", "Lesson")
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Generator.Model.Room", null)
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Generator.Model.SchoolClass", "SchoolClass")
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Generator.Model.Teacher", null)
                        .WithMany("ScheduleEntries")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("Backend_Generator.Model.Lesson", b =>
                {
                    b.Navigation("ScheduleEntries");
                });

            modelBuilder.Entity("Backend_Generator.Model.Room", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("ScheduleEntries");
                });

            modelBuilder.Entity("Backend_Generator.Model.SchoolClass", b =>
                {
                    b.Navigation("ScheduleEntries");
                });

            modelBuilder.Entity("Backend_Generator.Model.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Backend_Generator.Model.Teacher", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("ScheduleEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
